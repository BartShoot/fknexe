---
export const partial = true;
---
  <script>
    // GitHub API client
    class GitHubClient {
      constructor() {
        this.baseUrl = 'https://api.github.com';
        this.headers = {
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'astro-github-client'
        };
      }
      
      async request(endpoint, params = {}) {
        const url = new URL(`${this.baseUrl}${endpoint}`);
        
        Object.entries(params).forEach(([key, value]) => {
          if (value) url.searchParams.append(key, value.toString());
        });
        
        try {
          const response = await fetch(url.toString(), { headers: this.headers });
          
          if (!response.ok) {
            throw new Error(`GitHub API error: ${response.status}`);
          }
          
          return await response.json();
        } catch (error) {
          return { error: error.message || 'Failed to fetch from GitHub API' };
        }
      }
    }
    
    // Initialize client and parse URL params
    const githubClient = new GitHubClient();
    const urlParams = new URLSearchParams(window.location.search);
    const user = urlParams.get('user');
    const repo = urlParams.get('repo');
    const action = urlParams.get('action') || 'readme';
    
    // Function to handle the API request and return JSON
    async function handleRequest() {
      if (!user || !repo) {
        return { error: 'Missing required parameters: user and repo' };
      }
      
      let endpoint;
      switch (action) {
        case 'latest-release':
          endpoint = `/repos/${user}/${repo}/releases/latest`;
          break;
        case 'releases':
          endpoint = `/repos/${user}/${repo}/releases`;
          break;
        case 'readme':
          endpoint = `/repos/${user}/${repo}/readme`;
          break;
        default:
          return { error: `Unsupported action: ${action}` };
      }
      
      return await githubClient.request(endpoint);
    }
    
    // Execute the request and replace the document with JSON
    handleRequest().then(data => {
      // Set content type and replace document with JSON data
      document.open('text/plain');
      document.write(JSON.stringify(data));
      document.close();
    });
  </script>

